
minimal:     file format elf32-littleriscv


Disassembly of section .text:

00000000 <_start>:
.globl _start
.type _start,@function

_start:
  // set stack pointer
  li sp, 0x20001000
   0:	20001137          	lui	sp,0x20001

  .option push
  .option norelax
  la gp, __global_pointer$
   4:	00002197          	auipc	gp,0x2
   8:	91418193          	addi	gp,gp,-1772 # 1918 <__global_pointer$>
  .option pop

  // set argc, argv
  li a0, 0
   c:	00000513          	li	a0,0
  li a1, 0
  10:	00000593          	li	a1,0

  // jump to main
  call main
  14:	090000ef          	jal	ra,a4 <main>

00000018 <_fp_print>:

// Write a generic value to the tohost CSR
static inline void write_tohost(uint32_t val) { write_csr(CSR_TOHOST, val); }

// Print the given value in the simulation
void _fp_print(uint32_t val) {
  18:	fe010113          	addi	sp,sp,-32 # 20000fe0 <__global_pointer$+0x1ffff6c8>
  1c:	00812e23          	sw	s0,28(sp)
  20:	02010413          	addi	s0,sp,32
  24:	fea42623          	sw	a0,-20(s0)
  write_csr(CSR_TOHOST, 0xbaaabaaa);
  28:	baaac7b7          	lui	a5,0xbaaac
  2c:	aaa78793          	addi	a5,a5,-1366 # baaabaaa <__global_pointer$+0xbaaaa192>
  30:	51e79073          	csrw	0x51e,a5
  write_csr(CSR_TOHOST, val);
  34:	fec42783          	lw	a5,-20(s0)
  38:	51e79073          	csrw	0x51e,a5
}
  3c:	00000013          	nop
  40:	01c12403          	lw	s0,28(sp)
  44:	02010113          	addi	sp,sp,32
  48:	00008067          	ret

0000004c <_fp_finish>:

// Finish/stop the simulation
static inline void _fp_finish() {
  4c:	ff010113          	addi	sp,sp,-16
  50:	00812623          	sw	s0,12(sp)
  54:	01010413          	addi	s0,sp,16
  write_csr(CSR_TOHOST, 0xdeaddead);
  58:	deade7b7          	lui	a5,0xdeade
  5c:	ead78793          	addi	a5,a5,-339 # deaddead <__global_pointer$+0xdeadc595>
  60:	51e79073          	csrw	0x51e,a5
}
  64:	00000013          	nop
  68:	00c12403          	lw	s0,12(sp)
  6c:	01010113          	addi	sp,sp,16
  70:	00008067          	ret

00000074 <add>:
    write_csr(CSR_TOHOST, 0xbaaabaaa);
    write_csr(CSR_TOHOST, v);
}
*/

uint32_t add(uint32_t a, uint32_t b) {
  74:	fe010113          	addi	sp,sp,-32
  78:	00812e23          	sw	s0,28(sp)
  7c:	02010413          	addi	s0,sp,32
  80:	fea42623          	sw	a0,-20(s0)
  84:	feb42423          	sw	a1,-24(s0)
    return a + b;
  88:	fec42703          	lw	a4,-20(s0)
  8c:	fe842783          	lw	a5,-24(s0)
  90:	00f707b3          	add	a5,a4,a5
}
  94:	00078513          	mv	a0,a5
  98:	01c12403          	lw	s0,28(sp)
  9c:	02010113          	addi	sp,sp,32
  a0:	00008067          	ret

000000a4 <main>:

int main() {
  a4:	fe010113          	addi	sp,sp,-32
  a8:	00112e23          	sw	ra,28(sp)
  ac:	00812c23          	sw	s0,24(sp)
  b0:	02010413          	addi	s0,sp,32
    
    // Load 2 values to a5 separately.
    // And call csrw to output them.
    uint32_t x = 1;
  b4:	00100793          	li	a5,1
  b8:	fef42623          	sw	a5,-20(s0)
    __print(x);
  bc:	baaac7b7          	lui	a5,0xbaaac
  c0:	aaa78793          	addi	a5,a5,-1366 # baaabaaa <__global_pointer$+0xbaaaa192>
  c4:	51e79073          	csrw	0x51e,a5
  c8:	fec42783          	lw	a5,-20(s0)
  cc:	51e79073          	csrw	0x51e,a5
        "csrw 0x51e, %0"
        :
        : "r" (x)
    );
    */
    uint32_t y = 2;
  d0:	00200793          	li	a5,2
  d4:	fef42423          	sw	a5,-24(s0)
    __print(y);
  d8:	baaac7b7          	lui	a5,0xbaaac
  dc:	aaa78793          	addi	a5,a5,-1366 # baaabaaa <__global_pointer$+0xbaaaa192>
  e0:	51e79073          	csrw	0x51e,a5
  e4:	fe842783          	lw	a5,-24(s0)
  e8:	51e79073          	csrw	0x51e,a5
        :
        : "r" (y)
    );
    */
    
    uint32_t z = add(x, y);
  ec:	fe842583          	lw	a1,-24(s0)
  f0:	fec42503          	lw	a0,-20(s0)
  f4:	f81ff0ef          	jal	ra,74 <add>
  f8:	fea42223          	sw	a0,-28(s0)
    __print(z);
  fc:	baaac7b7          	lui	a5,0xbaaac
 100:	aaa78793          	addi	a5,a5,-1366 # baaabaaa <__global_pointer$+0xbaaaa192>
 104:	51e79073          	csrw	0x51e,a5
 108:	fe442783          	lw	a5,-28(s0)
 10c:	51e79073          	csrw	0x51e,a5
    asm volatile ("csrw 0x51e, a5");
    */
    
    // Terminate the simulation.
    // Put a while loop to make sure no unwanted side effects.
    _fp_finish();
 110:	f3dff0ef          	jal	ra,4c <_fp_finish>
    while(1) {}
 114:	0000006f          	j	114 <main+0x70>
